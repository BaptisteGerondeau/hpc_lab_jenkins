---
- name: Create build dirs: tensorflow
  file:
          path: "{{ item }}"       
          state: directory
          mode: '0755'
          owner: "{{ user }}"
          group: "{{ user }}"
  with_items:
          - "{{ tensorflow.dir_base }}"
          - "{{ tensorflow.dir_src }}"
          - "{{ tensorflow.dir_output }}"

- name: Fetch tensorflow release tarball
  get_url:
          url: "{{ tensorflow.release_url }}"
          dest: "{{ tensorflow.dir_base }}"

- name: Unzip the release
  unarchive:
          src: "{{ tensorflow.dir_base }}/{{ tensorflow.release_zip }}"
          dest: "{{ tensorflow.dir_src }}"
          format: zip

- name: Get the tensorflow configure scipt
  template:
          src: "configure_tensorflow.sh.j2"
          dest: "{{ tensorflow.dir_src }}/configure_tensorflow.sh"

- name: Configure tensorflow
  shell: "./configure_tensorflow.sh"
  args:
          chdir: "{{ tensorflow.dir_src }}"
          executable: "/bin/bash"
  register: tensorflow_configure_log
- debug: var=tensorflow_configure_log

- name: Get patch for bazel missing requirements
  template:
          src: "{{ tensorflow.patch }}.j2"
          dest: "{{ tensorflow.dir_src }}/{{ tensorflow.patch }}"
  when: "{{ tensorflow.patching_required }}"

- name: Apply patch
  shell: "patch -p0 -i {{ tensorflow.dir_src }}/{{ tensorflow.patch }}"
  args:
          chdir: "{{ tensorflow.dir_src }}"
          executable: "/bin/bash"
  when: "{{ tensorflow.patching_required }}"

- name: Get the tensorflow build scipt
  template:
          src: "build_tensorflow.sh.j2"
          dest: "{{ tensorflow.dir_src }}/build_tensorflow.sh"

- name: Build tensorflow
  shell: "./build_tensorflow.sh"
  args:
          chdir: "{{ tensorflow.dir_src }}"
          executable: "/bin/bash"
  register: tensorflow_build_log
- debug: var=tensorflow_build_log

- name: Build tensorflow package
  shell: "bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg"
  args:
          chdir: "{{ tensorflow.dir_src }}"
          executable: "/bin/bash"
  register: tensorflow_build_pkg_log
- debug: var=tensorflow_build_pkg_log

- name: Tar-up tensorflow output
  archive:
          path: "{{ tensorflow.dir_output }}"
          dest: "{{ dir_built }}/{{ tensorflow.built_tarball }}"
          format: gz

- name: Install tensorflow
  pip:
          name: "{{ tensorflow.wheel }}"
          virtualenv: "{{ venv_path }}"
  register: tensorflow_install_log
- debug: var=tensorflow_install_log

