---
- hosts: jenkins
  remote_user: root
  vars:
          jslave_list:
                  - "jslave-d03-openhpc"
                  - "jslave-d03-benchmark"
                  - "jslave-d05-openhpc" 
                  - "jslave-d05-benchmark"
                  - "jslave-tx2-openhpc"
                  - "jslave-tx2-benchmark"
                  - "jslave-qdc-openhpc"
                  - "jslave-qdc-benchmark"

  tasks:
          - name: Check that Jenkins master has an SSH key
            stat:
                path: "/var/lib/jenkins/.ssh/id_rsa.pub"
            register: sshkey

          - name: Create the Jenkins master SSH key
            shell: runuser -l jenkins -c "ssh-keygen -f /var/lib/jenkins/.ssh/id_rsa -t rsa -N ''"
            when: sshkey.stat.exists == False

          - name: Lookup executes locally.... Let's use slurp then
            slurp:
                src: /var/lib/jenkins/.ssh/id_rsa.pub
            register: master_key

          - name: Add the Jenkins master SSH key to itself
            authorized_key:
                    user: jenkins
                    state: present
                    key: "{{ master_key['content'] | b64decode }}" 

          - name: Ensure script dir exists
            file: path="/var/lib/jenkins/scripts" state=directory
          
          - name: Copy the helper scripts to Jenkins Master's script dir
            copy:
                    src: "{{ item }}"
                    dest: "/var/lib/jenkins/scripts/"
                    owner: root
                    group: root
                    mode: u=rx,g=rx,o=rwx
            with_items:
                    - "files/provisioning.py"
                    - "files/tarball_cacher.py"

          - name: Create jenkins_slave group to keep them from unionizing
            group:
                    name: jenkins_slave
                    state: present

          - include_tasks: ./tasks/create_slaves.yml
            vars:
                    master_sshkey: "{{ master_key['content'] | b64decode }}"

          - include_vars:
                  file: ./vars/jenkins_cred.yml.secret
                  name: jenkins_creds

          - name: create credentials in Jenkins for those slaves!
            jenkins_script:
                    user: "{{ jenkins_creds.user }}"
                    password: "{{ jenkins_creds.password }}"
                    url: "{{ jenkins_creds.url }}"
                    validate_certs: no
                    script: "{{ add_ssh_creds }}" 
                    args:
                            username: "{{ item }}"
            with_list: "{{ jslave_list }}"
            vars:
                    add_ssh_creds: |
                        import jenkins.model.*
                        import com.cloudbees.plugins.credentials.*
                        import com.cloudbees.plugins.credentials.common.*
                        import com.cloudbees.plugins.credentials.domains.*
                        import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
                        import hudson.plugins.sshslaves.*;
                        global_domain = Domain.global()
                        credentials_store =
                        Jenkins.instance.getExtensionList(
                        	'com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
                        credentials = new BasicSSHUserPrivateKey(
                               	 CredentialsScope.GLOBAL,
                               	 "$username",
                               	 "$username",
                               	 new BasicSSHUserPrivateKey.UsersPrivateKeySource(),
                               	 "",
                                 "$username"
                               	 )
                        credentials_store.addCredentials(global_domain, credentials)

          - name: create the slaves in Jenkins
            jenkins_script:
                    user: "{{ jenkins_creds.user }}"
                    password: "{{ jenkins_creds.password }}"
                    url: "{{ jenkins_creds.url }}"
                    validate_certs: no
                    script: "{{ add_ssh_slave }}" 
                    args:
                            username: "{{ item }}"
                            coordinatorexec: "{{ jslave_list|count|int*2 }}"
            with_list: "{{ jslave_list }}"
            vars:
                    add_ssh_slave: |
                        import hudson.model.Node.Mode
                        import hudson.slaves.*
                        import jenkins.model.Jenkins
                        import hudson.plugins.sshslaves.SSHLauncher
                        String credentialID = "$username"
                        String agentHome = "/home/$username"
                        String executors = '1'
                        if (credentialID == 'jslave-coordinator') { executors = "$coordinatorexec" } 
                        DumbSlave dumb = new DumbSlave("$username", // Agent name, usually matches the host computer's machine name
                                "$username", // Agent description
                                agentHome, // Workspace on the agent's computer
                                executors, // Number of executors
                                Mode.EXCLUSIVE, // "Usage" field, EXCLUSIVE is "only tied to node", NORMAL is "any"
                                "$username", // Labels
                                new SSHLauncher("localhost", 22, SSHLauncher.lookupSystemCredentials(credentialID), "", null, null, "", "", 60, 3, 15),
                                RetentionStrategy.INSTANCE) // Is the "Availability" field and INSTANCE means "Always"
                        Jenkins.instance.addNode(dumb)
                        println agentHome

          - name: Set the master's number of executors
            jenkins_script:
                    user: "{{ jenkins_creds.user }}"
                    password: "{{ jenkins_creds.password }}"
                    url: "{{ jenkins_creds.url }}"
                    validate_certs: no
                    script: "{{ add_master_executors }}" 
                    args:
                            masterexec: "30" #24 + margin
            vars:
                    add_master_executors: |
                        import hudson.model.*;
                        import jenkins.model.*;
                        Jenkins.getInstance().setNumExecutors(Integer.parseInt("$masterexec"))


          - name: Install python3, pip and python2 deps
            apt:
                    name: "{{ item }}"
                    state: installed
                    update_cache: yes
            with_items:
                    - python3
                    - python3-pip
                    - python-requests
                    - python-future

          - name: Install Jenkins Job Builder
            shell: "pip3 install jenkins-job-builder"

          - name: Ensure JJB config file dir is there
            file: 
                path: /etc/jenkins_jobs
                state: directory

          - name: Copy JJB config file
            template:
                src: "templates/jenkins_jobs.ini.j2"
                dest: "/etc/jenkins_jobs/jenkins_jobs.ini"

          - name: Install Ansible
            include_tasks: ./tasks/install_ansible.yml

          - name: Ensure Ansible roles path is there
            file: 
                path: "/etc/ansible/roles" 
                state: directory

          - name: Install provisioning role
            git:
                repo: https://github.com/Linaro/ansible-role-mr-provisioner.git
                dest: "/etc/ansible/roles/ansible-role-provision-mr-provisioner"
                version: "master"

          - name: Install benchmark deployment role
            git:
                repo: https://github.com/Linaro/hpc_deploy_benchmarks.git
                dest: "/etc/ansible/roles/hpc-deploy-benchmarks"
                version: "master"

          - name: Copy yaml job definition(s)
            copy:
                src: "files/{{ item }}.yml"
                dest: "/var/lib/jenkins/scripts/"
            with_items:
                    - provisioning_job
                    - machine_provision
                    - os_provision
                    - benchmark_job

          - name: Create jobs in Jenkins
            shell: "jenkins-jobs update /var/lib/jenkins/scripts/{{ item }}.yml"
            with_items:
                    - provisioning_job
                    - machine_provision
                    - os_provision
                    - benchmark_job
                    - ohpc_install

- hosts: fileserver
  vars:
    test_ssh_key: 
  vars_files:
          - vars/vendors.yml
          - vars/users.yml
          - vars/jslaves-benchmark.yml
          - vars/jslaves-openhpc.yml
  tasks:
          - include_tasks: ./tasks/setup_sftp.yml
          - include_tasks: ./tasks/cacher_repo_ans_setup.yml

- hosts: localhost
  gather_facts: no
  vars:
         mr_provisioner_do_provision: False
         mr_provisioner_url: "http://10.40.0.11:5000"
  vars_files:
          - vars/mrp_creds.yml.secret
          - vars/list_preseeds.yml
  roles:
          - role: ansible-role-mr-provisioner
  tasks:
          - name: Upload preseed from info in list_preseed.yml
            mr_provisioner_preseed:
                    name: "{{ item.name }}"
                    description: "{{ item.description }}"
                    type: "{{ item.type }}"
                    path: "{{ item.path }}"
                    url: "{{ mr_provisioner_url }}"
                    token: "{{ mr_provisioner_auth_token }}"
                    public: "{{ item.public | default(true) }}"
                    known_good: "{{ item.known_good | default(true) }}"
            with_items: "{{ list_preseeds }}"
